
<!html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Football Player Position Scorer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            padding: 30px;
        }
        
        .panel {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border: 1px solid #e1e5e9;
        }
        
        .panel h2 {
            color: #2d3436;
            margin-bottom: 20px;
            font-size: 1.5rem;
            border-bottom: 3px solid #4facfe;
            padding-bottom: 10px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2d3436;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
        }
        
        .btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(79, 172, 254, 0.4);
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #a8e6cf 0%, #dcedc8 100%);
            color: #2d3436;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        }
        
        .position-profiles {
            max-height: 400px;
            overflow-y: auto;
            margin-bottom: 20px;
        }
        
        .position-item {
            background: #f8f9fa;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            border-left: 4px solid #4facfe;
        }
        
        .position-item h4 {
            color: #2d3436;
            margin-bottom: 10px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .metric-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .score-display {
            text-align: center;
            padding: 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
            margin-top: 20px;
        }
        
        .score-number {
            font-size: 4rem;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .player-data {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #e1e5e9;
            padding: 15px;
            border-radius: 8px;
            font-family: monospace;
            font-size: 12px;
            background: #f8f9fa;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚öΩ Football Player Position Scorer</h1>
            <p>Create custom position profiles and score players based on their metrics</p>
        </div>
        
        <div class="main-content">
            <div class="panel">
                <h2>üìä Position Profile Manager</h2>
                
                <div class="form-group">
                    <label for="positionName">Position Name:</label>
                    <input type="text" id="positionName" placeholder="e.g., Poacher Striker, Box-to-Box Midfielder">
                </div>
                
                <div class="form-group">
                    <label for="metricSelect">Select Metric:</label>
                    <select id="metricSelect">
                        <option value="">-- Select a metric --</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="metricWeight">Weight (0-100):</label>
                    <input type="number" id="metricWeight" min="0" max="100" step="1" placeholder="Enter importance weight">
                </div>
                
                <button class="btn" onclick="addMetricToPosition()">Add Metric</button>
                <button class="btn btn-secondary" onclick="savePosition()">Save Position Profile</button>
                <button class="btn btn-danger" onclick="clearCurrentPosition()">Clear Current</button>
                
                <div id="currentMetrics" class="metrics-grid"></div>
                
                <h3 style="margin-top: 30px; color: #2d3436;">Saved Position Profiles:</h3>
                <div id="savedPositions" class="position-profiles"></div>
            </div>
            
            <div class="panel">
                <h2>üîç Player Scorer</h2>
                
                <div class="form-group">
                    <label for="selectedPosition">Select Position Profile:</label>
                    <select id="selectedPosition">
                        <option value="">-- Select position profile --</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="playerData">Player Data (CSV format):</label>
                    <textarea id="playerData" rows="8" placeholder="Paste player data here (comma-separated values)..."></textarea>
                </div>
                
                <button class="btn" onclick="scorePlayer()">Calculate Score</button>
                <button class="btn btn-secondary" onclick="loadExampleData()">Load Example Data</button>
                
                <div id="scoreResult"></div>
                
                <div id="playerInfo" style="margin-top: 20px;"></div>
            </div>
        </div>
    </div>

    <script>
        // Sample data structure for player metrics
        const playerMetrics = [
            'Goals', 'xG', 'Assists', 'xA', 'Goals per 90', 'xG per 90', 'Assists per 90',
            'Shots', 'Shots per 90', 'Shots on target, %', 'Goal conversion, %',
            'Successful defensive actions per 90', 'Defensive duels per 90', 'Defensive duels won, %',
            'Aerial duels per 90', 'Aerial duels won, %', 'Sliding tackles per 90',
            'Interceptions per 90', 'Shots blocked per 90',
            'Passes per 90', 'Accurate passes, %', 'Forward passes per 90', 'Accurate forward passes, %',
            'Key passes per 90', 'Progressive passes per 90', 'Crosses per 90', 'Accurate crosses, %',
            'Dribbles per 90', 'Successful dribbles, %', 'Offensive duels per 90', 'Offensive duels won, %',
            'Touches in box per 90', 'Progressive runs per 90', 'Duels per 90', 'Duels won, %'
        ];
        
        let currentPositionMetrics = {};
        let savedPositions = {};
        let playerDataHeaders = [];
        let playerDataValues = [];
        
        // Initialize the application
        function init() {
            populateMetricSelect();
            loadSavedData();
        }
        
        function populateMetricSelect() {
            const select = document.getElementById('metricSelect');
            select.innerHTML = '<option value="">-- Select a metric --</option>';
            
            playerMetrics.forEach(metric => {
                const option = document.createElement('option');
                option.value = metric;
                option.textContent = metric;
                select.appendChild(option);
            });
        }
        
        function addMetricToPosition() {
            const metric = document.getElementById('metricSelect').value;
            const weight = parseFloat(document.getElementById('metricWeight').value);
            
            if (!metric || isNaN(weight) || weight < 0 || weight > 100) {
                alert('Please select a metric and enter a valid weight (0-100)');
                return;
            }
            
            currentPositionMetrics[metric] = weight;
            updateCurrentMetricsDisplay();
            
            // Clear inputs
            document.getElementById('metricSelect').value = '';
            document.getElementById('metricWeight').value = '';
        }
        
        function updateCurrentMetricsDisplay() {
            const container = document.getElementById('currentMetrics');
            container.innerHTML = '';
            
            Object.entries(currentPositionMetrics).forEach(([metric, weight]) => {
                const div = document.createElement('div');
                div.className = 'metric-item';
                div.innerHTML = `
                    <span>${metric}</span>
                    <span style="font-weight: bold; color: #4facfe;">${weight}%</span>
                    <button onclick="removeMetric('${metric}')" style="background: #ff6b6b; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer;">√ó</button>
                `;
                container.appendChild(div);
            });
        }
        
        function removeMetric(metric) {
            delete currentPositionMetrics[metric];
            updateCurrentMetricsDisplay();
        }
        
        function savePosition() {
            const positionName = document.getElementById('positionName').value;
            
            if (!positionName || Object.keys(currentPositionMetrics).length === 0) {
                alert('Please enter a position name and add at least one metric');
                return;
            }
            
            savedPositions[positionName] = { ...currentPositionMetrics };
            updateSavedPositionsDisplay();
            updatePositionSelect();
            saveToLocalStorage();
            
            // Clear current position
            clearCurrentPosition();
            alert(`Position profile "${positionName}" saved successfully!`);
        }
        
        function clearCurrentPosition() {
            currentPositionMetrics = {};
            document.getElementById('positionName').value = '';
            updateCurrentMetricsDisplay();
        }
        
        function updateSavedPositionsDisplay() {
            const container = document.getElementById('savedPositions');
            container.innerHTML = '';
            
            Object.entries(savedPositions).forEach(([positionName, metrics]) => {
                const div = document.createElement('div');
                div.className = 'position-item';
                
                const metricsText = Object.entries(metrics)
                    .map(([metric, weight]) => `${metric}: ${weight}%`)
                    .join(', ');
                
                div.innerHTML = `
                    <h4>${positionName}</h4>
                    <p style="color: #636e72; font-size: 14px;">${metricsText}</p>
                    <button onclick="deletePosition('${positionName}')" style="background: #ff6b6b; color: white; border: none; border-radius: 4px; padding: 6px 12px; cursor: pointer; margin-top: 10px;">Delete</button>
                `;
                container.appendChild(div);
            });
        }
        
        function deletePosition(positionName) {
            if (confirm(`Are you sure you want to delete the "${positionName}" position profile?`)) {
                delete savedPositions[positionName];
                updateSavedPositionsDisplay();
                updatePositionSelect();
                saveToLocalStorage();
            }
        }
        
        function updatePositionSelect() {
            const select = document.getElementById('selectedPosition');
            select.innerHTML = '<option value="">-- Select position profile --</option>';
            
            Object.keys(savedPositions).forEach(positionName => {
                const option = document.createElement('option');
                option.value = positionName;
                option.textContent = positionName;
                select.appendChild(option);
            });
        }
        
        function loadExampleData() {
            const exampleData = `B. van Rooij,Twente,Twente,RB,24,2000000,2025-06-30,36,3486,1,1.63,6,3.74,14.35,58.45,Netherlands,Netherlands,right,174,72,no,8.57,6.12,70.46,2.58,49,0.13,0.17,0.23,4.13,5.46,0.65,1,0.03,0,0,2.35,0.03,1,0.03,0.04,0,0,23,0.59,21.74,4.348,0.15,3.18,39.02,0.05,0,3.1,39.17,0.62,1.37,69.81,3.61,51.43,0.75,1.81,0.59,33.1,0.96,0.83,47.19,80.8,16.73,72.07,6.92,95.9,17.4,83.53,40.02,86.84,4.1,53.46,19.97,35.45,0.1,0.72,0.05,0.03,0.03,100,0.41,5.5,73.24,3.3,46.88,0.28,27.27,0.75,1.21,11.02,70.96,0,0,0,0,0,0,1.65,0,0,0,0,0,0,Netherlands,Eredivisie 2024-25,RB`;
            document.getElementById('playerData').value = exampleData;
        }
        
        function scorePlayer() {
            const selectedPosition = document.getElementById('selectedPosition').value;
            const playerDataText = document.getElementById('playerData').value;
            
            if (!selectedPosition || !playerDataText) {
                alert('Please select a position profile and enter player data');
                return;
            }
            
            const positionProfile = savedPositions[selectedPosition];
            const playerData = parsePlayerData(playerDataText);
            
            if (!playerData) {
                alert('Invalid player data format');
                return;
            }
            
            const score = calculateScore(positionProfile, playerData);
            displayScore(score, playerData, selectedPosition);
        }
        
        function parsePlayerData(dataText) {
            const headers = [
                'Player', 'Team', 'Team within selected timeframe', 'Position', 'Age', 'Market value', 'Contract expires',
                'Matches played', 'Minutes played', 'Goals', 'xG', 'Assists', 'xA', 'Duels per 90', 'Duels won, %',
                'Birth country', 'Passport country', 'Foot', 'Height', 'Weight', 'On loan',
                'Successful defensive actions per 90', 'Defensive duels per 90', 'Defensive duels won, %',
                'Aerial duels per 90', 'Aerial duels won, %', 'Sliding tackles per 90', 'PAdj Sliding tackles',
                'Shots blocked per 90', 'Interceptions per 90', 'PAdj Interceptions', 'Fouls per 90',
                'Yellow cards', 'Yellow cards per 90', 'Red cards', 'Red cards per 90',
                'Successful attacking actions per 90', 'Goals per 90', 'Non-penalty goals', 'Non-penalty goals per 90',
                'xG per 90', 'Head goals', 'Head goals per 90', 'Shots', 'Shots per 90', 'Shots on target, %',
                'Goal conversion, %', 'Assists per 90', 'Crosses per 90', 'Accurate crosses, %',
                'Crosses from left flank per 90', 'Accurate crosses from left flank, %',
                'Crosses from right flank per 90', 'Accurate crosses from right flank, %',
                'Crosses to goalie box per 90', 'Dribbles per 90', 'Successful dribbles, %',
                'Offensive duels per 90', 'Offensive duels won, %', 'Touches in box per 90',
                'Progressive runs per 90', 'Accelerations per 90', 'Received passes per 90',
                'Received long passes per 90', 'Fouls suffered per 90', 'Passes per 90',
                'Accurate passes, %', 'Forward passes per 90', 'Accurate forward passes, %',
                'Back passes per 90', 'Accurate back passes, %', 'Lateral passes per 90',
                'Accurate lateral passes, %', 'Short / medium passes per 90', 'Accurate short / medium passes, %',
                'Long passes per 90', 'Accurate long passes, %', 'Average pass length, m',
                'Average long pass length, m', 'xA per 90', 'Shot assists per 90', 'Second assists per 90',
                'Third assists per 90', 'Smart passes per 90', 'Accurate smart passes, %',
                'Key passes per 90', 'Passes to final third per 90', 'Accurate passes to final third, %',
                'Passes to penalty area per 90', 'Accurate passes to penalty area, %',
                'Through passes per 90', 'Accurate through passes, %', 'Deep completions per 90',
                'Deep completed crosses per 90', 'Progressive passes per 90', 'Accurate progressive passes, %',
                'League', 'Main Position'
            ];
            
            try {
                const values = dataText.split(',');
                if (values.length !== headers.length) {
                    throw new Error('Data length mismatch');
                }
                
                const playerData = {};
                headers.forEach((header, index) => {
                    playerData[header] = values[index];
                });
                
                return playerData;
            } catch (error) {
                console.error('Error parsing player data:', error);
                return null;
            }
        }
        
        function calculateScore(positionProfile, playerData) {
            let totalScore = 0;
            let totalWeight = 0;
            let calculationDetails = [];
            
            Object.entries(positionProfile).forEach(([metric, weight]) => {
                const playerValue = parseFloat(playerData[metric]);
                if (!isNaN(playerValue)) {
                    // Normalize the metric value (this is simplified - in a real system you'd have benchmarks)
                    let normalizedValue = Math.min(100, Math.max(0, playerValue));
                    
                    // For percentage metrics, keep as is
                    if (metric.includes('%')) {
                        normalizedValue = Math.min(100, Math.max(0, playerValue));
                    } else if (metric.includes('per 90')) {
                        // For per 90 metrics, scale appropriately (this is a simplified approach)
                        normalizedValue = Math.min(100, playerValue * 10);
                    } else {
                        // For absolute values, scale based on typical ranges
                        normalizedValue = Math.min(100, playerValue * 5);
                    }
                    
                    const weightedScore = (normalizedValue * weight) / 100;
                    totalScore += weightedScore;
                    totalWeight += weight;
                    
                    calculationDetails.push({
                        metric,
                        value: playerValue,
                        normalizedValue: normalizedValue.toFixed(2),
                        weight,
                        weightedScore: weightedScore.toFixed(2)
                    });
                }
            });
            
            const finalScore = totalWeight > 0 ? (totalScore / totalWeight) * 100 : 0;
            
            return {
                score: finalScore,
                details: calculationDetails
            };
        }
        
        function displayScore(scoreData, playerData, positionName) {
            const container = document.getElementById('scoreResult');
            
            container.innerHTML = `
                <div class="score-display">
                    <div class="score-number">${scoreData.score.toFixed(1)}%</div>
                    <h3>${playerData.Player} - ${positionName} Fit</h3>
                    <p>Based on ${scoreData.details.length} metrics</p>
                </div>
            `;
            
            // Display player info
            const playerInfo = document.getElementById('playerInfo');
            playerInfo.innerHTML = `
                <h3>Player Information</h3>
                <div class="player-data">
                    <strong>Name:</strong> ${playerData.Player}<br>
                    <strong>Team:</strong> ${playerData.Team}<br>
                    <strong>Position:</strong> ${playerData.Position}<br>
                    <strong>Age:</strong> ${playerData.Age}<br>
                    <strong>Height:</strong> ${playerData.Height}cm<br>
                    <strong>Weight:</strong> ${playerData.Weight}kg<br>
                    <strong>Market Value:</strong> ‚Ç¨${parseFloat(playerData['Market value']).toLocaleString()}
                </div>
            `;
        }
        
        function saveToLocalStorage() {
            localStorage.setItem('footballPlayerScorer_positions', JSON.stringify(savedPositions));
        }
        
        function loadSavedData() {
            const saved = localStorage.getItem('footballPlayerScorer_positions');
            if (saved) {
                savedPositions = JSON.parse(saved);
                updateSavedPositionsDisplay();
                updatePositionSelect();
            }
        }
        
        // Initialize the application when the page loads
        init();
    </script>
</body>
</html>
